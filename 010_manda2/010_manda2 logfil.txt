1504 2024
manda2 logfil

2355
Jeg havde problem med at CORS blokerede for at backenden kunne fetche sine egne API data. Con-log Origin  gav undefined -- det virker til at  når serveren spørger sig selv (sin egen API) så er origin undefined, altså !origin. Jeg kom efter mange timer i tanke om at CORS NPM dok'en nævnte at REST APIer sku' ha || !origin i sin funktion... jeg havde egentlig løst det ved at tilføje "undefined"-datatypen til arrayet af whitelist-URLer -- det virker bare som et hak! 

Prøv i øvrigt at spørge ChatGPT om, hvor mange ord der vil være i dens svar på dette spørgsmål.

1604 2024
Min Post fra frontend med userdata til backend (for auth) var tom -- altså, body'en var tom. Det viste sig at være fordi jeg havde headers { Content:  ... og ikke headers: { "Content-Type": ...
Lidt frustrerende!

jeg skal lave en auth login funktion.

Jeg laver en post i auth router -- det virker lidt kringlet for mig -- frontend har en tekst input, den laver et objekt, objektet JSON.stringify(), fetchpost til backend auth router, auth router pakker det ud via express.json() og pakker det ind igen, fetchposter det til backend user API.

Jeg har lavet en søgerfunktion der finder navnet på brugeren -- og en if-else i auth router, der tager imod den. Jeg havde sat den til at  tjekke data.username -- men den buggede fordi jeg jo skal tjekke data.data.username.

Jeg ville bruge debugeren i VScode men jeg kan ikke bruge sessions uden en secret -- og jeg forsøgte at ændre launch.json til at have env vars, men det døde debuggeren af (uncaught syntax error i json). Bah!

Jeg skal lave bcrypt compare -- den buggede på at jeg har kaldt det "password" i frontenden og "passwordHash" i backenden. Altså, det havde jeg glemt! Var nøødt til at tjekke mine ord. Fuuuck. Men nu virker den (hvis man altså ikke giver den null, undefined, etc)

Nu laver jeg Ny Bruger funktion.

rm -rf
remove -recursive force

Jeg er igang med at lave newUserSignup. Og jeg vil have URL og salt tal lagt i en env eller i store -- men jeg byttede om på  frontend (som er svelte) og backend (som jo er node, og fik storen).

Jeg har nu salt i min .env, men ... det er en STRING. 

Hvorfor er det en string!???

Nu fungerer det atlave en ny bruger ... tror jeg?

Det fungerer ikke endnu fordi da jeg kopierede min items-API.js, så glemte jeg at opdatere NOGLE af felterne til username og passwordHash!

Jeg er faret vild et eller andet sted imellem min frontends postfetch til backends auth-signup, og dens fetch til backend user api, og déns svar tilbage til backend.

Det virker til (via console logs) at min api slet ikke blive ramt!

Det burde IKKE være fordi min fetch URL er /api/users/ og ikke /api/users

Jeg prøvede at sætte signup posten til at sende en hardocded user, og det kan den godt!

Der er en await i frontenden, som ... hvis jeg fjerner den, så kan frontenden godt sende den første fetch -- men ikke nogen fetches derefter.

Det er fordi den ikke awaiter. Den skal vente ... men den.... kører bare på.

Chatgpt foreslår at det er fordi jeg ikke wawaiter oversætningen af response til strings. lad os prøve det.

Det hjalp lidt men den hænger stadig efterførste post.

1704 2024
OK, nu bliver den nye user postet til User APIen, men, det hashede PW er anderledes hver gang. Det kan da ikke være rigtigt?

jeg kigggede på npm bcrypts doku og der er noget nyt nu -- et callback i bcrypt.hash() funktionen.

Nope, stadig nye hashes hver gang.

ah... det er åbenbart sådan det skal være. Grunden til at jeg trode at det ikke var i orden var fordi jeg testedet det med in egen login funktion -- som ikke er færidg.

Right, nu virker det. Man kan lave nye brugere, og man kan logge ind. Fedt fedt fedt. Det skal vist have en toast!

OK, jeg var nødt til at debugge en del for at have ordentlige if-else ruter igennem mine routers -- hvis tomt pw, navn, etc -- men jeg tror den er der nu.  Men det ser godt nok rodet ud inde i AuthRouter.js -- alle de if-else! eg var lige ved at glemme indentering.

JEg har glemt at fjerne mine test navne fra loginsvelte.
Jeg skal virkelig hjave lavet e nauto test thing.

1804 2024
funny thing -- if you search for express auto test ... you get ads for car mechanics.

Den artikel på StackO sagde man burde block cipher sine pw hashes i db'en.

Det ville give mening at lave et nyt test projekt til at prøve dét af.

aesjs kan vist kun requires? Chat GPT foreslår jeg laver en slags fetch -- lad os prøve det.

Det virker til at virke!

2104 2024
jeg læser på sessions. Jeg har egentlig allerede lavet det men jeg synes ikke jeg forstår det. Men det går bedre. Jeg finder ud af ting.

jeg kan se jeg har sat cors() --- hvorfor gjorde jeg det?
Jeg har sat den tilbage til options, jeg kan ikke se nogen failures.

Jeg bør sku sætte en auto test suite ind asap.

jeg har fundet mocha.
vha 
import { createRequire } from 'module';
const require = createRequire(import.meta.url);
const moduleThatUsesRequire = require('module-that-uses-require');

kan jeg bruge mocha. jeg kan få det grundlæggende test eksempel til at virke. jeg tror jeg også skal bruge superuser til at hive fat i mine Express endpoints.

Jeg kom i øvrigt til at slette mit AES JS test dir! Lidt en skam. burde måske... gitte dem til et andet repo? Eller noget? lokalt repo? Hm.

MOCHA -- instruks
jeg har  lavet et nyt dir -- 000_007 mocha test -- og lavet en simpel express i den. Ved siden af appen har jeg lavet test/test.js, som har assert etc i sig. i package.json har jeg sat script test mocha. det kører jeg så med npm test.

MOCHA TEST
https://github.com/mochajs/mocha-examples/blob/master/packages/express-rest-api/test/index.test.js

Jeg tror jeg kan bruge supertest til at teste mine endpoints. Lad o sprøæve det.

-> mocha test kan ikke køres fordi man ikke kan require app.js -- ok, prøver med import.

Mangler at default exporte min app

det fuckin WORKS

Godt nok fejler testen men det virker! 

OK -- proces: 
app skal default exportes i bunden af app.js (virker mærkeligt men OK)
app skal importes i test.js

2204 2024
jeg vil lave en test suite. 
jeg bør nok bruge noget tid på at have dev branch .... men jeg gider ikke.

Jeg forsøger at finde ud af hvordan express session bruges. Eksemplet viser at man kan smide data ind i req.session, men når jeg gør det i min auth router, så sker der ikke noget. ER det fordi min auth router ikke har express-session importet? Jeg må prøvbe det i min main app.

Har sat en tid ind i opstartskonsollen så jeg kan se hvornår den er startet. Det kan jeg godt lide.

Og nu har jeg testet det med session. Jeg tror faktisk Anders viste os netop det? Jeg bliver bare ved med at tænke at imports er globale ... me ndet er de vel ikke?

er det nok bare at importere session til auth router?
nej ... men altså ... jeg ... jeg kan GODT lave en endpoint i min auth router der gør det -- altså, sætter en req.data ting. 
Men hvorfor kan min auth endpoint så ikke gøre det?

Altså så må svaret jo være at min If-else ikke virker
-> nope, mine if-elses virker som de skal. Så hvorfor bliver req.session ikke sat derinde?

Er det fordi det er en POST?
-> ja, det virker til at være derfor. Hvis jeg har endpoint POST med req.session.name = hans så har det ingen effekt.
Men det samme med en GET? Det virker.

express-session NPM siger at man kan bruge noget der hedder session.regenerate efter sine POSTs? lad os prøve det.

Det gjorde vist heller ingen forskel.

... FUCKK jeg tester et post endpoint i min app.js (altså ikke router) via postman og DET virker. Det kan godt sætte whatever. ... eller dvs jeg får det ud igennem min console log (console.log req.session.name) men IKKE i min res.send({ data }).

Så det virker til at jeg tilgår FORSKELLIGE stores? Forskellige værdier?

hvis man sætter credentials header i fetch skal CORS osse have den til true acces  ontreol allow credentials
credentials: true

det var derfor. det er credentials. CORS options skal have credentials og fetchen (fra frontend til backend) skal have credentials include.

Anders sagde det tilmed i fredags. Fuckkkkkk

hvad er forskellen på at ... altså, jeg kan sætte data i req.session.username, mnen jeg kan jo osse sætte det i storen i baggrunden? det bør jeg jo nok.

2304 2024
OK, nu har jeg så username i req.session cookien. Jeg tror jeg har nogenlunde styr på session nu.

hvorfor faen ville jeg egentlig have det?

Nu hvor jeg skal bruge session til at se om min bruger er  logget ind, tænker jeg at det faktisk giver meget godt mening at have front og backend serveret samme sted -- det ville jo betyde at de har samme session, ikke?

Da jeg gerne vil bruge server ssr bør jeg starte forfra, synes jeg.

SE 012_manda2_logfil.txt